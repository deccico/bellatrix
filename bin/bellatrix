#!/usr/bin/env python

#import sys
import argparse

import bellatrix

usage = """
		   bellatrix [--version] [--help]
           <command> [<args>]
		"""


def main():
	# create the base parser with a subparsers argument
	parser = argparse.ArgumentParser(prog=bellatrix.APP.lower(), \
									description=usage, \
									usage=usage, \
									version= bellatrix.APP + " " + bellatrix.__version__)
	#parser.add_argument('-v', '--version', action='store_true', help='Prints the application version and exits')
	subparsers = parser.add_subparsers()
	
	# add a sub-command "burn_ami"
	parser_abc = subparsers.add_parser('provision')
	parser_abc.add_argument('-a', action='store_true')
	parser_abc.add_argument('--b', type=int)
	parser_abc.add_argument('c', nargs=2)

	# add a sub-command "abc"
#	parser_abc = subparsers.add_parser('abc')
#	parser_abc.add_argument('-a', action='store_true')
#	parser_abc.add_argument('--b', type=int)
#	parser_abc.add_argument('c', nargs=2)
	
	# add a sub-command "xyz"
#	parser_xyz = subparsers.add_parser('xyz')
#	parser_xyz.add_argument('--x', dest='xxx')
#	parser_xyz.add_argument('-y', action='store_const', const=object)
#	parser_xyz.add_argument('z', choices='123')
	
	# parse, using the subcommands
#	parser.parse_args('abc --b 2 AA BB'.split())
#	parser.parse_args('--bar B xyz -y 3'.split())
#	parser.parse_args('xyz --b 42'.split())

	args = parser.parse_args()


	if args.version:
		print "%s - %s" % (APP, __version__)


if __name__ == "__main__":
	main()





